/students/:
  get:
    summary: Get a paginated List of students
    tags:
      - Students
    parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
        description: Page number
      - name: per_page
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
        description: Items per page
      - name: sort
        in: query
        required: false
        schema:
          type: string
        enum: [ asc, desc, age, group ]
        description: Sorting order (asc, desc, age or group)
    responses:
      '200':
        description: Successful response
        content:
          application/json:
            example:
              students:
                - id: 1
                  first_name: John
                  last_name: Doe
                  age: 25
                  group_id: 3
                - id: 2
                  first_name: Jane
                  last_name: Smith
                  age: 22
                  group_id: 5
              total_pages: 10
              current_page: 1
              per_page: 10
              total_items: 100
          schema:
            $ref: '#/components/schemas/StudentsListResponse'
    operationId: getPaginatedStudents
  post:
    summary: Create a new student
    tags:
      - Students
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateStudentRequestBody'
    responses:
      '201':
        description: Student created successfully
        content:
          application/json:
            example:
              message: Student John Doe created successfully
      '400':
        description: Invalid input
    operationId: createStudent

/students/{id}:
  get:
    summary: Get student by ID
    tags:
      - Students
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: Student ID
    responses:
      '200':
        description: Successful response
        content:
          application/json:
            example:
              id: 1
              first_name: John
              last_name: Doe
              age: 25
              group_id: 3
          schema:
            $ref: '#/components/schemas/Student'
      '404':
        description: Student not found
    operationId: getStudentByID
  delete:
    summary: Delete student by ID
    tags:
      - Students
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: Student ID
    responses:
      '200':
        description: Student deleted successfully
        content:
          application/json:
            example:
              message: Student 1 deleted successfully
      '404':
        description: Student not found
    operationId: deleteStudent
